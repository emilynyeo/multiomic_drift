b2_f4$overall_F4 <- rowSums(b2_f4[, paste0("chr", 1:22), with = FALSE], na.rm = TRUE)
# Change sample ID format
b1_f1 <- b1_f1 %>% dplyr::select(c(family.ID, sample.ID, overall_F1)) %>%
separate(sample.ID, remove=FALSE, sep='\\-',
into=c('remove', 'remove2', 'sample.ID')) %>%
mutate(sample.ID = str_remove(sample.ID, "^0+")) %>%
dplyr::select(!c(remove, remove2))
b1_f2 <- b1_f2 %>% dplyr::select(c(sample.ID, overall_F2)) %>%
separate(sample.ID, remove=FALSE, sep='\\-',
into=c('remove', 'remove2', 'sample.ID')) %>%
mutate(sample.ID = str_remove(sample.ID, "^0+")) %>%
dplyr::select(!c(remove, remove2))
b1_f3 <- b1_f3 %>% dplyr::select(c(sample.ID, overall_F3)) %>%
separate(sample.ID, remove=FALSE, sep='\\-',
into=c('remove', 'remove2', 'sample.ID')) %>%
mutate(sample.ID = str_remove(sample.ID, "^0+")) %>%
dplyr::select(!c(remove, remove2))
b1_f4 <- b1_f4 %>% dplyr::select(c(sample.ID, overall_F4)) %>%
separate(sample.ID, remove=FALSE, sep='\\-',
into=c('remove', 'remove2', 'sample.ID')) %>%
mutate(sample.ID = str_remove(sample.ID, "^0+")) %>%
dplyr::select(!c(remove, remove2))
# flag the 4 duplicates
b1_f1_nodubs <- b1_f1 %>%
group_by(sample.ID) %>% # Group by sample.ID to manage occurrences
mutate(occurrence = row_number()) %>%
mutate(sample.ID = ifelse(occurrence > 1, paste0(sample.ID, ".2"), sample.ID)) %>%
ungroup() %>%
select(-occurrence)
b1_f2_nodubs <- b1_f2 %>%
group_by(sample.ID) %>% # Group by sample.ID to manage occurrences
mutate(occurrence = row_number()) %>%
mutate(sample.ID = ifelse(occurrence > 1, paste0(sample.ID, ".2"), sample.ID)) %>%
ungroup() %>%
select(-occurrence)
b1_f3_nodubs <- b1_f3 %>%
group_by(sample.ID) %>% # Group by sample.ID to manage occurrences
mutate(occurrence = row_number()) %>%
mutate(sample.ID = ifelse(occurrence > 1, paste0(sample.ID, ".2"), sample.ID)) %>%
ungroup() %>%
select(-occurrence)
b1_f4_nodubs <- b1_f4 %>%
group_by(sample.ID) %>% # Group by sample.ID to manage occurrences
mutate(occurrence = row_number()) %>%
mutate(sample.ID = ifelse(occurrence > 1, paste0(sample.ID, ".2"), sample.ID)) %>%
ungroup() %>%
select(-occurrence)
# trip batch 2
b2_f1 <- b2_f1 %>% dplyr::select(c(family.ID, sample.ID, overall_F1))
b2_f2 <- b2_f2 %>% dplyr::select(c(sample.ID, overall_F2))
b2_f3 <- b2_f3 %>% dplyr::select(c(sample.ID, overall_F3))
b2_f4 <- b2_f4 %>% dplyr::select(c(sample.ID, overall_F4))
batch1 <- b1_f1_nodubs  %>%
full_join(b1_f2_nodubs , by = "sample.ID") %>%
full_join(b1_f3_nodubs , by = "sample.ID") %>%
full_join(b1_f4_nodubs , by = "sample.ID")
batch2 <- b2_f1 %>%
full_join(b2_f2, by = "sample.ID") %>%
full_join(b2_f3, by = "sample.ID") %>%
full_join(b2_f4, by = "sample.ID")
all_f <- rbind(batch1, batch2)
View(all_f)
length(unique(all_f))
length(unique(all_f$sample.ID))
score_dir <- "/Users/emily/projects/research/Stanislawski/Cris_F4_weights/pulled_scores/"
# Make sure the file name is a string, enclosed in quotes
b1_f1 <- fread(paste0(score_dir, "liz_batch1_F1_merged_fam_pr.csv"))
b1_f2 <- fread(paste0(score_dir, "liz_batch1_F2_merged_fam_pr.csv"))
b1_f3 <- fread(paste0(score_dir, "liz_batch1_F3_merged_fam_pr.csv"))
b1_f4 <- fread(paste0(score_dir, "liz_batch1_F4_merged_fam_pr.csv"))
b2_f1 <- fread(paste0(score_dir, "batch2_F1_merged_fam_pr.csv"))
b2_f2 <- fread(paste0(score_dir, "batch2_F2_merged_fam_pr.csv"))
b2_f3 <- fread(paste0(score_dir, "batch2_F3_merged_fam_pr.csv"))
b2_f4 <- fread(paste0(score_dir, "batch2_F4_merged_fam_pr.csv"))
# Rename columns 2 to 23
names(b1_f1)[2:23] <- paste0("chr", 1:22)
names(b1_f2)[2:23] <- paste0("chr", 1:22)
names(b1_f3)[2:23] <- paste0("chr", 1:22)
names(b1_f4)[2:23] <- paste0("chr", 1:22)
names(b2_f1)[2:23] <- paste0("chr", 1:22)
names(b2_f2)[2:23] <- paste0("chr", 1:22)
names(b2_f3)[2:23] <- paste0("chr", 1:22)
names(b2_f4)[2:23] <- paste0("chr", 1:22)
# Make row sums
b1_f1$overall_F1 <- rowSums(b1_f1[, paste0("chr", 1:22), with = FALSE], na.rm = TRUE)
b1_f2$overall_F2 <- rowSums(b1_f2[, paste0("chr", 1:22), with = FALSE], na.rm = TRUE)
b1_f3$overall_F3 <- rowSums(b1_f3[, paste0("chr", 1:22), with = FALSE], na.rm = TRUE)
b1_f4$overall_F4 <- rowSums(b1_f4[, paste0("chr", 1:22), with = FALSE], na.rm = TRUE)
b2_f1$overall_F1 <- rowSums(b2_f1[, paste0("chr", 1:22), with = FALSE], na.rm = TRUE)
b2_f2$overall_F2 <- rowSums(b2_f2[, paste0("chr", 1:22), with = FALSE], na.rm = TRUE)
b2_f3$overall_F3 <- rowSums(b2_f3[, paste0("chr", 1:22), with = FALSE], na.rm = TRUE)
b2_f4$overall_F4 <- rowSums(b2_f4[, paste0("chr", 1:22), with = FALSE], na.rm = TRUE)
# Change sample ID format
b1_f1 <- b1_f1 %>% dplyr::select(c(family.ID, sample.ID, overall_F1)) %>%
separate(sample.ID, remove=FALSE, sep='\\-',
into=c('remove', 'remove2', 'sample.ID')) %>%
mutate(sample.ID = str_remove(sample.ID, "^0+")) %>%
dplyr::select(!c(remove, remove2))
b1_f2 <- b1_f2 %>% dplyr::select(c(sample.ID, overall_F2)) %>%
separate(sample.ID, remove=FALSE, sep='\\-',
into=c('remove', 'remove2', 'sample.ID')) %>%
mutate(sample.ID = str_remove(sample.ID, "^0+")) %>%
dplyr::select(!c(remove, remove2))
b1_f3 <- b1_f3 %>% dplyr::select(c(sample.ID, overall_F3)) %>%
separate(sample.ID, remove=FALSE, sep='\\-',
into=c('remove', 'remove2', 'sample.ID')) %>%
mutate(sample.ID = str_remove(sample.ID, "^0+")) %>%
dplyr::select(!c(remove, remove2))
b1_f4 <- b1_f4 %>% dplyr::select(c(sample.ID, overall_F4)) %>%
separate(sample.ID, remove=FALSE, sep='\\-',
into=c('remove', 'remove2', 'sample.ID')) %>%
mutate(sample.ID = str_remove(sample.ID, "^0+")) %>%
dplyr::select(!c(remove, remove2))
# flag the 4 duplicates
b1_f1_nodubs <- b1_f1 %>%
group_by(sample.ID) %>% # Group by sample.ID to manage occurrences
mutate(occurrence = row_number()) %>%
mutate(sample.ID = ifelse(occurrence > 1, paste0(sample.ID, ".2"), sample.ID)) %>%
ungroup() %>%
select(-occurrence)
b1_f2_nodubs <- b1_f2 %>%
group_by(sample.ID) %>% # Group by sample.ID to manage occurrences
mutate(occurrence = row_number()) %>%
mutate(sample.ID = ifelse(occurrence > 1, paste0(sample.ID, ".2"), sample.ID)) %>%
ungroup() %>%
select(-occurrence)
b1_f3_nodubs <- b1_f3 %>%
group_by(sample.ID) %>% # Group by sample.ID to manage occurrences
mutate(occurrence = row_number()) %>%
mutate(sample.ID = ifelse(occurrence > 1, paste0(sample.ID, ".2"), sample.ID)) %>%
ungroup() %>%
select(-occurrence)
b1_f4_nodubs <- b1_f4 %>%
group_by(sample.ID) %>% # Group by sample.ID to manage occurrences
mutate(occurrence = row_number()) %>%
mutate(sample.ID = ifelse(occurrence > 1, paste0(sample.ID, ".2"), sample.ID)) %>%
ungroup() %>%
select(-occurrence)
# trip batch 2
b2_f1 <- b2_f1 %>% dplyr::select(c(family.ID, sample.ID, overall_F1))
b2_f2 <- b2_f2 %>% dplyr::select(c(sample.ID, overall_F2))
b2_f3 <- b2_f3 %>% dplyr::select(c(sample.ID, overall_F3))
b2_f4 <- b2_f4 %>% dplyr::select(c(sample.ID, overall_F4))
batch1 <- b1_f1_nodubs  %>%
full_join(b1_f2_nodubs , by = "sample.ID") %>%
full_join(b1_f3_nodubs , by = "sample.ID") %>%
full_join(b1_f4_nodubs , by = "sample.ID")
batch2 <- b2_f1 %>%
full_join(b2_f2, by = "sample.ID") %>%
full_join(b2_f3, by = "sample.ID") %>%
full_join(b2_f4, by = "sample.ID")
# make a column indicating batch 1 or 2
batch1$old_or_new <- rep("batch1", nrow(batch1))
batch2$old_or_new <- rep("batch2", nrow(batch2))
all_f <- rbind(batch1, batch2)
View(all_f)
length(unique(all_f$sample.ID))
View(b1_f1)
# Plot the histogram of the first dataset
hist(batch1$overall_F1, col = rgb(0, 0, 1, 0.2),
main = "F1 Scores Distribuition", xlab = "F1", ylab = "Frequency")
# Add the histogram of the second dataset to the existing plot
hist(batch2$overall_F1, col = rgb(1, 0, 0, 0.2), add = TRUE)
# Add a legend
legend("right",
legend = c("Liz's data", "New data", "Overlapping scores"),
fill = c(rgb(0, 0, 1, 0.3),
rgb(1, 0, 0, 0.3),
rgb(1, 0, 1, 0.3)))
# Plot the histogram of the first dataset
hist(batch1$overall_F2, col = rgb(0, 0, 1, 0.2),
main = "F2 Scores Distribuition", xlab = "F2", ylab = "Frequency")
# Add the histogram of the second dataset to the existing plot
hist(batch2$overall_F2, col = rgb(1, 0, 0, 0.2), add = TRUE)
legend("right",
legend = c("Liz's data", "New data", "Overlapping scores"),
fill = c(rgb(0, 0, 1, 0.3),
rgb(1, 0, 0, 0.3),
rgb(1, 0, 1, 0.3)))
# Plot the histogram of the first dataset
hist(batch1$overall_F3, col = rgb(0, 0, 1, 0.2),
main = "F3 Scores Distribuition", xlab = "F3", ylab = "Frequency")
# Add the histogram of the second dataset to the existing plot
hist(batch2$overall_F3, col = rgb(1, 0, 0, 0.2), add = TRUE)
legend("right",
legend = c("Liz's data", "New data", "Overlapping scores"),
fill = c(rgb(0, 0, 1, 0.3),
rgb(1, 0, 0, 0.3),
rgb(1, 0, 1, 0.3)))
# Plot the histogram of the first dataset
hist(batch1$overall_F4, col = rgb(0, 0, 1, 0.2),
main = "F4 Scores Distribuition", xlab = "F4", ylab = "Frequency")
# Add the histogram of the second dataset to the existing plot
hist(batch2$overall_F4, col = rgb(1, 0, 0, 0.2), add = TRUE)
legend("right",
legend = c("Liz's data", "New data", "Overlapping scores"),
fill = c(rgb(0, 0, 1, 0.3),
rgb(1, 0, 0, 0.3),
rgb(1, 0, 1, 0.3)))
meta <- fread("~/projects/research/Stanislawski/BMI_risk_scores/data/DRIFT_working_dataset_meta_deltas_filtered_05.21.2024.csv")
head(meta)
View(meta)
F_meta <- merge(all_f, meta, by.x = "sample.ID", by.y = "record_id")
cor.test(F_meta$overall_F1, F_meta$outcome_BMI_fnl_BL)
cor.test(F_meta$overall_F2, F_meta$outcome_BMI_fnl_BL)
cor.test(F_meta$overall_F3, F_meta$outcome_BMI_fnl_BL)
cor.test(F_meta$overall_F4, F_meta$outcome_BMI_fnl_BL) #
cor.test(F_meta$overall_F1, F_meta$outcome_BMI_fnl_BL) #
F_meta %>%
ggplot(aes(x = overall_F1, y = outcome_BMI_fnl_BL, color = old_or_new)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, aes(group = old_or_new)) +
labs(title = "F1 PRS score (x) and baseline BMI (y)",
x = "PRs F1 scores ",
y = "BL BMI") +
theme_minimal()
library(gridExtra)
F1_BMI <- F_meta %>%
ggplot(aes(x = overall_F1, y = outcome_BMI_fnl_BL, color = old_or_new)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, aes(group = old_or_new)) +
labs(title = "F1 PRS score (x) and baseline BMI (y)",
x = "PRs F1 scores ",
y = "BL BMI") +
theme_minimal()
F2_BMI <- F_meta %>%
ggplot(aes(x = overall_F2, y = outcome_BMI_fnl_BL, color = old_or_new)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, aes(group = old_or_new)) +
labs(title = "F2 PRS score (x) and baseline BMI (y)",
x = "PRs F2 scores ",
y = "BL BMI") +
theme_minimal()
F3_BMI <- F_meta %>%
ggplot(aes(x = overall_F3, y = outcome_BMI_fnl_BL, color = old_or_new)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, aes(group = old_or_new)) +
labs(title = "F3 PRS score (x) and baseline BMI (y)",
x = "PRs F3 scores ",
y = "BL BMI") +
theme_minimal()
F4_BMI <- F_meta %>%
ggplot(aes(x = overall_F4, y = outcome_BMI_fnl_BL, color = old_or_new)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, aes(group = old_or_new)) +
labs(title = "F4 PRS score (x) and baseline BMI (y)",
x = "PRs F4 scores ",
y = "BL BMI") +
theme_minimal()
grid.arrange(F1_BMI, F2_BMI, F3_BMI, F4_BMI, ncol = 2)
# Plot the histogram of the first dataset
F1_overlap <- hist(batch1$overall_F1, col = rgb(0, 0, 1, 0.2),
main = "F1 Scores Distribuition", xlab = "F1", ylab = "Frequency")
# Add the histogram of the second dataset to the existing plot
hist(batch2$overall_F1, col = rgb(1, 0, 0, 0.2), add = TRUE)
legend("right",
legend = c("Liz's data", "New data", "Overlapping scores"),
fill = c(rgb(0, 0, 1, 0.3),
rgb(1, 0, 0, 0.3),
rgb(1, 0, 1, 0.3)))
F1 <- function(batch1, batch2) {
hist(batch1$overall_F1, col = rgb(0, 0, 1, 0.2),
main = "F1 Scores Distribution", xlab = "F1", ylab = "Frequency")
# Add the histogram of the second dataset to the existing plot
hist(batch2$overall_F1, col = rgb(1, 0, 0, 0.2), add = TRUE)
# Add a legend to the plot
legend("right",
legend = c("Liz's data", "New data", "Overlapping scores"),
fill = c(rgb(0, 0, 1, 0.3),
rgb(1, 0, 0, 0.3),
rgb(1, 0, 1, 0.3)))
}
F1
# Store the code as an expression
F1 <- expression({
hist(batch1$overall_F1, col = rgb(0, 0, 1, 0.2),
main = "F1 Scores Distribuition", xlab = "F1", ylab = "Frequency")
hist(batch2$overall_F1, col = rgb(1, 0, 0, 0.2), add = TRUE)
legend("right",
legend = c("Liz's data", "New data", "Overlapping scores"),
fill = c(rgb(0, 0, 1, 0.3),
rgb(1, 0, 0, 0.3),
rgb(1, 0, 1, 0.3)))
})
# Execute the stored expression
eval(F1)
# Store the code as an expression
F1 <- expression({
hist(batch1$overall_F1, col = rgb(0, 0, 1, 0.2),
main = "F1 Scores Distribuition", xlab = "F1", ylab = "Frequency")
hist(batch2$overall_F1, col = rgb(1, 0, 0, 0.2), add = TRUE)
legend("right",
legend = c("Liz's data", "New data", "Overlapping scores"),
fill = c(rgb(0, 0, 1, 0.3),
rgb(1, 0, 0, 0.3),
rgb(1, 0, 1, 0.3)))
})
# Execute the stored expression
eval(F1)
F1
F2 <- expression({
# Plot the histogram of the first dataset
hist(batch1$overall_F2, col = rgb(0, 0, 1, 0.2),
main = "F2 Scores Distribuition", xlab = "F2", ylab = "Frequency")
# Add the histogram of the second dataset to the existing plot
hist(batch2$overall_F2, col = rgb(1, 0, 0, 0.2), add = TRUE)
legend("right",
legend = c("Liz's data", "New data", "Overlapping scores"),
fill = c(rgb(0, 0, 1, 0.3),
rgb(1, 0, 0, 0.3),
rgb(1, 0, 1, 0.3)))
})
F3 <- expression({
# Plot the histogram of the first dataset
hist(batch1$overall_F3, col = rgb(0, 0, 1, 0.2),
main = "F3 Scores Distribuition", xlab = "F3", ylab = "Frequency")
# Add the histogram of the second dataset to the existing plot
hist(batch2$overall_F3, col = rgb(1, 0, 0, 0.2), add = TRUE)
legend("right",
legend = c("Liz's data", "New data", "Overlapping scores"),
fill = c(rgb(0, 0, 1, 0.3),
rgb(1, 0, 0, 0.3),
rgb(1, 0, 1, 0.3)))
})
F4 <- expression({
# Plot the histogram of the first dataset
hist(batch1$overall_F4, col = rgb(0, 0, 1, 0.2),
main = "F4 Scores Distribuition", xlab = "F4", ylab = "Frequency")
# Add the histogram of the second dataset to the existing plot
hist(batch2$overall_F4, col = rgb(1, 0, 0, 0.2), add = TRUE)
legend("right",
legend = c("Liz's data", "New data", "Overlapping scores"),
fill = c(rgb(0, 0, 1, 0.3),
rgb(1, 0, 0, 0.3),
rgb(1, 0, 1, 0.3)))
})
grid.arrange(eval(F1), eval(F2), eval(F3), eval(F4), ncol = 2)
F1 <- expression({
hist(batch1$overall_F1, col = rgb(0, 0, 1, 0.2),
main = "F1 Scores Distribuition", xlab = "F1", ylab = "Frequency")
hist(batch2$overall_F1, col = rgb(1, 0, 0, 0.2), add = TRUE)
legend("right",
legend = c("Liz's data", "New data", "Overlapping scores"),
fill = c(rgb(0, 0, 1, 0.3),
rgb(1, 0, 0, 0.3),
rgb(1, 0, 1, 0.3)))
})
# F2
F2 <- expression({
# Plot the histogram of the first dataset
hist(batch1$overall_F2, col = rgb(0, 0, 1, 0.2),
main = "F2 Scores Distribuition", xlab = "F2", ylab = "Frequency")
# Add the histogram of the second dataset to the existing plot
hist(batch2$overall_F2, col = rgb(1, 0, 0, 0.2), add = TRUE)
legend("right",
legend = c("Liz's data", "New data", "Overlapping scores"),
fill = c(rgb(0, 0, 1, 0.3),
rgb(1, 0, 0, 0.3),
rgb(1, 0, 1, 0.3)))
})
# F3
F3 <- expression({
# Plot the histogram of the first dataset
hist(batch1$overall_F3, col = rgb(0, 0, 1, 0.2),
main = "F3 Scores Distribuition", xlab = "F3", ylab = "Frequency")
# Add the histogram of the second dataset to the existing plot
hist(batch2$overall_F3, col = rgb(1, 0, 0, 0.2), add = TRUE)
legend("right",
legend = c("Liz's data", "New data", "Overlapping scores"),
fill = c(rgb(0, 0, 1, 0.3),
rgb(1, 0, 0, 0.3),
rgb(1, 0, 1, 0.3)))
})
# F4
F4 <- expression({
# Plot the histogram of the first dataset
hist(batch1$overall_F4, col = rgb(0, 0, 1, 0.2),
main = "F4 Scores Distribuition", xlab = "F4", ylab = "Frequency")
# Add the histogram of the second dataset to the existing plot
hist(batch2$overall_F4, col = rgb(1, 0, 0, 0.2), add = TRUE)
legend("right",
legend = c("Liz's data", "New data", "Overlapping scores"),
fill = c(rgb(0, 0, 1, 0.3),
rgb(1, 0, 0, 0.3),
rgb(1, 0, 1, 0.3)))
})
eval(F1)
eval(F2)
eval(F3)
eval(F4)
F1_BL_BMI <- lm(outcome_BMI_fnl_BL ~ overall_F1 + sex + cohort_number + age +
race + Intervention + old_or_new, data = F_meta)
sjPlot::tab_model(F1_BL_BMI,
title = "F1 PRS score and Baseline BMI",
string.pred = "Predictors",
string.est = "Estimate",
string.std = "std. Beta",
string.ci = "CI",
string.se = "std. Error",
p.style = c("numeric_stars"),
p.threshold = c(0.05))
F1_BL_BMI <- lm(outcome_BMI_fnl_BL ~ overall_F1 + sex + cohort_number + age +
race + old_or_new, data = F_meta)
sjPlot::tab_model(F1_BL_BMI,
title = "F1 PRS score and Baseline BMI",
string.pred = "Predictors",
string.est = "Estimate",
string.std = "std. Beta",
string.ci = "CI",
string.se = "std. Error",
p.style = c("numeric_stars"),
p.threshold = c(0.05))
F2_BL_BMI <- lm(outcome_BMI_fnl_BL ~ overall_F2 + sex + cohort_number + age +
race + old_or_new, data = F_meta)
sjPlot::tab_model(F2_BL_BMI,
title = "F2 PRS score and Baseline BMI",
string.pred = "Predictors",
string.est = "Estimate",
string.std = "std. Beta",
string.ci = "CI",
string.se = "std. Error",
p.style = c("numeric_stars"),
p.threshold = c(0.05))
F3_BL_BMI <- lm(outcome_BMI_fnl_BL ~ overall_F3 + sex + cohort_number + age +
race + old_or_new, data = F_meta)
sjPlot::tab_model(F3_BL_BMI,
title = "F3 PRS score and Baseline BMI",
string.pred = "Predictors",
string.est = "Estimate",
string.std = "std. Beta",
string.ci = "CI",
string.se = "std. Error",
p.style = c("numeric_stars"),
p.threshold = c(0.05))
F4_BL_BMI <- lm(outcome_BMI_fnl_BL ~ overall_F4 + sex + cohort_number + age +
race + old_or_new, data = F_meta)
sjPlot::tab_model(F4_BL_BMI,
title = "F4 PRS score and Baseline BMI",
string.pred = "Predictors",
string.est = "Estimate",
string.std = "std. Beta",
string.ci = "CI",
string.se = "std. Error",
p.style = c("numeric_stars"),
p.threshold = c(0.05))
F1 <- expression({
hist(batch1$overall_F1, col = rgb(0, 0, 1, 0.2),
main = "F1 Scores Distribuition", xlab = "F1", ylab = "Frequency")
hist(batch2$overall_F1, col = rgb(1, 0, 0, 0.2), add = TRUE)
legend("right",
legend = c("Liz's data", "New data", "Overlapping scores"),
fill = c(rgb(0, 0, 1, 0.3),
rgb(1, 0, 0, 0.3),
rgb(1, 0, 1, 0.3)))
})
# F2
F2 <- expression({
# Plot the histogram of the first dataset
hist(batch1$overall_F2, col = rgb(0, 0, 1, 0.2),
main = "F2 Scores Distribuition", xlab = "F2", ylab = "Frequency")
# Add the histogram of the second dataset to the existing plot
hist(batch2$overall_F2, col = rgb(1, 0, 0, 0.2), add = TRUE)
legend("right",
legend = c("Liz's data", "New data", "Overlapping scores"),
fill = c(rgb(0, 0, 1, 0.3),
rgb(1, 0, 0, 0.3),
rgb(1, 0, 1, 0.3)))
})
# F3
F3 <- expression({
# Plot the histogram of the first dataset
hist(batch1$overall_F3, col = rgb(0, 0, 1, 0.2),
main = "F3 Scores Distribuition", xlab = "F3", ylab = "Frequency")
# Add the histogram of the second dataset to the existing plot
hist(batch2$overall_F3, col = rgb(1, 0, 0, 0.2), add = TRUE)
legend("right",
legend = c("Liz's data", "New data", "Overlapping scores"),
fill = c(rgb(0, 0, 1, 0.3),
rgb(1, 0, 0, 0.3),
rgb(1, 0, 1, 0.3)))
})
# F4
F4 <- expression({
# Plot the histogram of the first dataset
hist(batch1$overall_F4, col = rgb(0, 0, 1, 0.2),
main = "F4 Scores Distribuition", xlab = "F4", ylab = "Frequency")
# Add the histogram of the second dataset to the existing plot
hist(batch2$overall_F4, col = rgb(1, 0, 0, 0.2), add = TRUE)
legend("right",
legend = c("Liz's data", "New data", "Overlapping scores"),
fill = c(rgb(0, 0, 1, 0.3),
rgb(1, 0, 0, 0.3),
rgb(1, 0, 1, 0.3)))
})
eval(F1)
eval(F2)
eval(F3)
eval(F4)
colnames(F_meta)
F_meta$`WB Total %Fat (3m-BL)`
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(knitr, tidyverse, dplyr, ggplot2, stringr, tibble, data.table
gridExtra)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(knitr, tidyverse, dplyr, ggplot2, stringr, tibble, data.table,
gridExtra)
View(all_f)
out <- "/Users/emily/projects/research/Stanislawski/comps/mutli-omic-predictions/data/F1_F4/"
write.table(all_f, paste(out, "F1_F4_PRS_scores.csv", sep = ""),
row.names = FALSE, col.names = TRUE, quote = FALSE, sep = ",")
write.table(F_meta, paste(out, "F1_F4_PRS_meta_scores.csv", sep = ""),
row.names = FALSE, col.names = TRUE, quote = FALSE, sep = ",")
